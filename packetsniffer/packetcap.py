from multiprocessing.pool import ThreadPool
from scapy.all import *
import sys

class pktcap():
    def capture(self, capfilter="", timeout=60, count=1):
        if capfilter == None:
            capfilter = ""
        results = "Packet Capture  --  FILTER (%s)\n\n" % capfilter
        pkts = sniff(filter=capfilter, timeout=timeout, count=count)
        for pkt in pkts:
            ip_src = ""
            ip_dst = ""
            tcp_sport = 0
            tcp_dport = 0
            tcp_payload = ""
            if IP in pkt:
                ip_src = str(pkt[IP].src)
                ip_dst = str(pkt[IP].dst)
            if TCP in pkt:
                tcp_sport = int(pkt[TCP].sport)
                tcp_dport = int(pkt[TCP].dport)
                tcp_payload = str(pkt[TCP].payload)

            if (tcp_payload.strip() == ""):
                continue

            results += "%s:%s -> %s:%s %s\n" % (ip_src, tcp_sport, ip_dst, tcp_dport, tcp_payload)

        return results


# -----------------------------------------------------------------------------
# main
# -----------------------------------------------------------------------------
if __name__ == "__main__":
    def usage():
        print "%s <packet_count> <max_time> [filter string]" % (sys.argv[0])
    if (len(sys.argv) < 3) or (len(sys.argv) > 4):
        usage()
        sys.exit(0)

    pktcnt = int(sys.argv[1])
    maxtime = int(sys.argv[2])
    capfilter = None
    if (len(sys.argv) == 4):
        capfilter = sys.argv[3]

    # a sample cap filter mat be something like
    # "(host 192.168.1.8 or host 192.168.124) and tcp and port 21"

    pool = ThreadPool(processes=1)

    p = pktcap()
    # tuple of args for foo, please note a "," at the end of the arguments
    async_result = pool.apply_async(p.capture, (capfilter, maxtime, pktcnt,))

    # Do some other stuff in the main process
    print "hi"

    print async_result.get()
