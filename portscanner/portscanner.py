#!/usr/bin/env python

# Original code borrowed from http://code.activestate.com/recipes/286240-python-portscanners/
# Modified as needed by Adam Compton

import socket
import sys

TIMEOUT = 0.5

def checkport(host, port):
    socket.setdefaulttimeout(TIMEOUT)
    sd = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        sd.connect((host, port))
    except socket.error:
        return 'CLOSED'
    else:
        sd.close()
        return 'OPEN'

def scan(host, ports):
    openports = []
    for port in ports:
        if checkport(host, port) <> 'CLOSED':
            openports.append(port)

    return openports

if __name__ == '__main__':
    def usage():
        print "%s <target IP> <start port> <end port>" % (sys.argv[0])
    if (len(sys.argv) <> 4) or (int(sys.argv[2]) > int(sys.argv[3])):
        usage()
        sys.exit(0)

    # call "scan" for the target port range for the target ip
    openports = scan(sys.argv[1], xrange(int(sys.argv[2]), int(sys.argv[3])))
    for port in openports:
        print port
